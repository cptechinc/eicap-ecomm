<?php
	use Dplus\ProcessWire\DplusWire;

	class EicapPrograms extends WireData implements Module {
		/**
		 * Prefix to find Program Role
		 * @var string
		 */
		protected $roleprefix = "program-";

		public static function getModuleInfo() {
			return array(
				'title' => 'Eicap Program Roles Extension',
				'version' => 101,
				'summary' => 'Extends Roles for Programs with extra properties',
				'singular' => true,
				'autoload' => true,
			);
		}

		public function init() {
			$this->add_hooks();
		}

		protected function add_hooks() {
			$this->addHookProperty('Role(name*=program-)::program', function($event) {
				$role = $event->object;
				$event->return = str_replace($this->roleprefix , '', $role->name);
			});

			$this->addHookProperty('User::programs', function($event) {
				$user = $event->object;
				$event->return = $user->roles->filter("name*=$this->roleprefix");
			});

			$this->addHook('User::in_program', function($event) {
				$user = $event->object;
				$programname = $event->arguments(0);
				$event->return = $user->hasRole($this->roleprefix . $programname);
			});

			// Add method hook to add program role to user
			$this->addHook('User::add_program', function($event) {
				$user = $event->object;
				$programname = $event->arguments(0);
				$programcode = (strpos($code, $this->roleprefix) !== false) ? $programname : $this->roleprefix . $programname;
				$event->return = $user->addRole($programcode);
			});

			$this->addHook('User::remove_program', function($event) {
				$user = $event->object;
				$programname = $event->arguments(0);
				$programcode = (strpos($code, $this->roleprefix) !== false) ? $programname : $this->roleprefix . $programname;
				$event->return = $user->removeRole($programcode);
			});

			$this->addHook('User::get_programs', function($event) {
				$user = $event->object;
				$allprograms = $this->get_programs();
				$event->return = $user->roles->filter("name*=$this->roleprefix");
			});

			$this->add_adminhooks();
		}

		public function add_adminhooks() {
			$roles = $this->wire('modules')->get('DplusUser')::$roles;
			$admin = $roles['admin'];
			$slsmgr = $roles['sales-manager'];

			$this->addHook("User(roles=$admin|$slsmgr)::get_programs_reps", function($event) {
				$user = $event->object;
				$programnames = $user->roles->filter("name*=$this->roleprefix")->explode('name');
				$event->return = wire('users')->find("roles=$programnames")->explode('name');
			});
		}

		/**
		 * Creates a new Program
		 * @param string $code  Program Code e.g. hdst
		 * @param string $title Program Description or Title
		 */
		public function add_program($code, $title) {
			$programcode = (strpos($code, $this->roleprefix) !== false) ? $code : $this->roleprefix . $code;
			$p = new Role(); // create new page object
			$p->name = strtolower($programcode); // give it a name used in the url for the page
			$p->title = $title;
			return $p->save();
		}

		/**
		 * Returns if Program Exists already
		 * @param  string $code Program Code e.g. hdst
		 * @return bool         Does Program Exist?
		 */
		public function does_programexist($code) {
			return boolval(wire('roles')->find("name={$this->roleprefix}$code")->count);
		}

		/**
		 * Returns an array of Programs
		 * @return array Roles (Programs)
		 */
		public function get_programs() {
			return wire('roles')->find("name*=$this->roleprefix");
		}
	}
?>
